using Microsoft.AspNet.Identity;
using Microsoft.AspNet.Identity.Owin;
using CBA.Models.Models;
using CBA.Models.ViewModels.UserViewModels;
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Text;
using System.Threading.Tasks;
using System.Web;
using System.Web.Mvc;
using CBA.BusinessLogic;
using AppContext = CBA.Models.Models.AppContext;


namespace CBA.Controllers
{
    public class UserController : Controller
    {
        
        #region managers
        private ApplicationSignInManager _signInManager;
        private ApplicationUserManager _userManager;

        public UserController()
        {
        }

        public UserController(ApplicationUserManager userManager, ApplicationSignInManager signInManager)
        {
            UserManager = userManager;
            SignInManager = signInManager;
        }

        public ApplicationSignInManager SignInManager
        {
            get
            {
                return _signInManager ?? HttpContext.GetOwinContext().Get<ApplicationSignInManager>();
            }
            private set
            {
                _signInManager = value;
            }
        }

        public ApplicationUserManager UserManager
        {
            get
            {
                return _userManager ?? HttpContext.GetOwinContext().GetUserManager<ApplicationUserManager>();
            }
            private set
            {
                _userManager = value;
            }
        }
        #endregion

        private AppContext db = new AppContext();
        UserLogic userLogic = new UserLogic();

        // GET: User
        [ClaimsAuthorize("DynamicClaim", "ViewListOfUsers")]
        public ActionResult Index()
        {
            var applicationUsers = UserManager.Users.Include(a => a.Role);
            return View(applicationUsers.ToList());
        }

        // GET: User/Details
        [ClaimsAuthorize("DynamicClaim", "ViewListOfUsers")]
        public async Task<ActionResult> Details(string id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }

            ApplicationUser applicationUser = await UserManager.FindByIdAsync(id);
            if (applicationUser == null)
            {
                return HttpNotFound();
            }
            return View(applicationUser);
        }

        // GET: User/Create   
        //[ClaimsAuthorize("DynamicClaim", "AddNewUser")]
        public ActionResult Create()
        {
            ViewBag.Roles = new SelectList(db.Roles, "ID", "Name");
            return View();
        }

        // POST: User/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        //[ClaimsAuthorize("DynamicClaim", "AddNewUser")]
        public async Task<ActionResult> Create(CreateUserViewModel model)
        {
            ViewBag.Roles = new SelectList(db.Roles, "ID", "Name");

            if (ModelState.IsValid)
            {
                try
                {
                    if (!userLogic.IsUniqueUsername(model.Username))
                    {
                        AddError("Username must be unique");
                        return View(model);
                    }
                    if (!userLogic.IsUniqueEmail(model.Email))
                    {
                        AddError("Email must be unique");
                        return View(model);
                    }

                    string autoGeneratedPassword = new UtilityLogic().GetRandomPassword();
                    var user = new ApplicationUser 
                    {
                        UserName = model.Username,
                        Email = model.Email,
                        RoleID = model.RoleID,
                        FirstName = model.FirstName,
                        LastName = model.LastName,
                        PhoneNumber = model.PhoneNumber,
                        PasswordChanged = false
                    };

                    // Send generated password to the user
                    try
                    {
                        userLogic.SendPasswordToUser(model.FirstName, model.Email, model.Username, autoGeneratedPassword);
                    }
                    catch (Exception ex)
                    {
                        AddError($"We encountered an error while attempting to send the mail.\n Error Message : {ex.Message}.\n The auto generated password is: {autoGeneratedPassword}");
                    }
                    var result = await UserManager.CreateAsync(user, autoGeneratedPassword);
                    if (result.Succeeded)
                    {
                        return RedirectToAction("Index");
                    }
                    AddErrors(result);
                    return View(model);
                }
                catch (Exception ex)
                {
                    AddError(ex.ToString());
                    return View(model);
                }
            }
            AddError("Please enter valid data");
            return View(model);
        }

        // GET: User/Edit/3
        [ClaimsAuthorize("DynamicClaim", "EditUserInformation")]
        public async Task<ActionResult> Edit(string id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            ApplicationUser applicationUser = await UserManager.FindByIdAsync(id);
            if (applicationUser == null)
            {
                return HttpNotFound();
            }

            EditUserViewModel model = new EditUserViewModel
            {
                Id = applicationUser.Id,
                FirstName = applicationUser.FirstName,
                LastName = applicationUser.LastName,
                Username = applicationUser.UserName,
                Email = applicationUser.Email,
                PhoneNumber = applicationUser.PhoneNumber
            };

            ViewBag.RoleID = new SelectList(db.Roles, "ID", "Name", applicationUser.RoleID);
            return View(model);
        }

        // POST: User/Edit/3
        [HttpPost]
        [ValidateAntiForgeryToken]
        [ClaimsAuthorize("DynamicClaim", "EditUserInformation")]
        public async Task<ActionResult> Edit(EditUserViewModel model)
        {
            ViewBag.RoleID = new SelectList(db.Roles, "ID", "Name", model.RoleID);

            if (ModelState.IsValid)
            {
                try
                {
                    ApplicationUser applicationUser = await UserManager.FindByIdAsync(model.Id);
                    applicationUser.FirstName = model.FirstName;
                    applicationUser.LastName = model.LastName;
                    applicationUser.Email = model.Email;
                    applicationUser.UserName = model.Username;
                    applicationUser.PhoneNumber = model.PhoneNumber;
                    applicationUser.RoleID = model.RoleID;

                    await UserManager.UpdateAsync(applicationUser);
                    TempData["EditUserSuccess"] = "User Edited Successfuly!";
                    return RedirectToAction("Index");
                }
                catch (Exception e)
                {
                    AddError(e.ToString());
                    return View(model);
                }
            }
            AddError("Please enter valid data");
            return View(model);
        }

        // GET: User/Delete/3
        [ClaimsAuthorize("DynamicClaim", "EditUserInformation")]
        public async Task<ActionResult> Delete(string id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            ApplicationUser applicationUser = await UserManager.FindByIdAsync(id);
            if (applicationUser == null)
            {
                return HttpNotFound();
            }
            return View(applicationUser);
        }

        // GET: User/togglestatus/2
        public async Task<ActionResult> ToggleStatus(string id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            ApplicationUser applicationUser = await UserManager.FindByIdAsync(id);
            if (applicationUser == null)
            {
                return HttpNotFound();
            }
            if (applicationUser.Status == Status.Active)
            {
                applicationUser.Status = Status.Inactive;
                TempData["DeactivateUserSuccess"] = "User Deactivated Successfuly!";
            }
            else
            {
                applicationUser.Status = Status.Active;
                TempData["ActivateUserSuccess"] = "User Activated Successfuly!";
            }
            await UserManager.UpdateAsync(applicationUser);
            //db.Entry(applicationUser).State = EntityState.Modified;
            //db.SaveChanges();

            return RedirectToAction("Index");
        }

        // POST: User/Delete/3
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        [ClaimsAuthorize("DynamicClaim", "EditUserInformation")]
        public async Task<ActionResult> DeleteConfirmed(string id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            ApplicationUser applicationUser = await UserManager.FindByIdAsync(id);

            await UserManager.DeleteAsync(applicationUser);
            TempData["DeleteUserSuccess"] = "User Deleted Successfuly!";
            return RedirectToAction("Index");

        }
        private void AddError(string error)
        {
            ModelState.AddModelError("", error);
        }

        private void AddErrors(IdentityResult result)
        {
            foreach (var error in result.Errors)
            {
                ModelState.AddModelError("", error);
            }
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }
    }
}
